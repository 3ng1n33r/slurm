  - name: "Install {{ app_name }} dependencies"
    ansible.builtin.yum:
      name: "{{ item }}"
      update_cache: yes
      state: present
    with_items:
      #- "gcc-6"
      - "epel-release"
      - "gcc"
      - "patch"
      - "bzip2"
      - "openssl-devel"
      - "libyaml-devel"
      - "libffi-devel"
      - "readline-devel"
      - "zlib-devel"
      - "gdbm-devel"
      - "ncurses-devel"
      - "git-core"
      - "postgresql-devel"
      - "libxml2-devel"
      - "libxslt"
      - "libxslt-devel"
      - "nodejs"
    become: true
  
  - name: "Clone a github rbenv repository"
    ansible.builtin.git:
      repo: https://github.com/rbenv/rbenv.git
      dest: /home/{{ app_user }}/.rbenv
      clone: yes
      update: no

  - name: "Clone a github ruby-build repository"
    ansible.builtin.git:
      repo: https://github.com/rbenv/ruby-build.git
      dest: /home/{{ app_user }}/.rbenv/plugins/ruby-build
      clone: yes
      update: no
  
  - name: "Add rbenv init to /.bash_profile"
    ansible.builtin.lineinfile:
      path: /home/{{ app_user }}/.bash_profile
      insertafter: 'export PATH'
      line: 'eval "$(~/.rbenv/bin/rbenv init - bash)"'
      state: present

  - name: "Reload bash profile"
    ansible.builtin.command: bash -lc 'source ~/.bash_profile'

  - name: "Is ruby installed"
    block:
      - name: "Check ruby {{ ruby_version }} installed" 
        ansible.builtin.command: bash -lc 'rbenv versions | grep {{ ruby_version }}'
    rescue:
      - name: "Install ruby {{ ruby_version }}"
        ansible.builtin.command: bash -lc 'rbenv install {{ ruby_version }}'
        args:
          creates: /home/{{ app_user }}/.rbenv/versions/{{ ruby_version }}/bin/
      - name: "Set global ruby {{ ruby_version }}"
        ansible.builtin.command: bash -lc 'rbenv global {{ ruby_version }}'

  - name: "Copy {{ app_name }} files"
    ansible.builtin.copy:
      src: files/xpaste/
      dest: "{{ app_path }}"
      owner: "{{ app_user }}"
      group: "{{ app_user }}"
      mode: 0644
      force: no
    become: true
  
  - name: "Replace main nginx config"
    ansible.builtin.template:
      src: nginx.conf.j2
      dest: /etc/nginx/nginx.conf
      owner: "{{ app_user }}"
      group: "{{ app_user }}"
      mode: 0644
    become: true
  
  - name: "Run bundle config"
    ansible.builtin.command: bash -lc 'cd {{ app_path }} && bundle config build.nokogiri --use-system-libraries'
  
  - name: "Run bundle install"
    ansible.builtin.command: bash -lc 'cd {{ app_path }} && bundle install --clean --no-cache --without development'
    register: command_result
    failed_when: "'FAILED' in command_result.stderr"
  
  - name: "Copy service file"
    ansible.builtin.template:
      src: xpaste.service.j2
      dest: /etc/systemd/system/{{ app_name }}.service
      owner: "{{ app_user }}"
      group: "{{ app_user }}"
      mode: 0644
    become: true
    notify:
      - Reload systemctl
  
  - name: "Create /etc/systemd/system/{{ app_name }}.service.d/ dir"
    ansible.builtin.file:
      path: /etc/systemd/system/{{ app_name }}.service.d/
      state: directory
      mode: 0755
    become: true

  - name: "Copy environment file"
    ansible.builtin.template:
      src: env.conf.j2
      dest: /etc/systemd/system/{{ app_name }}.service.d/env.conf
      owner: "{{ app_user }}"
      group: "{{ app_user }}"
      mode: 0644
    become: true
    notify:
      - Reload systemctl

  - name: "Start service {{ app_name }}"
    ansible.builtin.service:
      name: '{{ app_name }}.service'
      state: started
      enabled: yes
    become: true